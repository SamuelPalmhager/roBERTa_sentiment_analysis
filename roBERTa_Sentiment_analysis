{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2157,"sourceType":"datasetVersion","datasetId":18}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/samuelpalmhager/sentiment-analysis-roberta-samuel-palmhager?scriptVersionId=210002492\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"#Generellt anv√§ndbara bibliotek\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n#Transformers bibliotek relaterade till BERT\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\nfrom scipy.special import softmax","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:31:53.623551Z","iopub.execute_input":"2024-11-27T20:31:53.62479Z","iopub.status.idle":"2024-11-27T20:32:00.789115Z","shell.execute_reply.started":"2024-11-27T20:31:53.624745Z","shell.execute_reply":"2024-11-27T20:32:00.7879Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Limit the data to the first 1000 reviews, seeing that I only want to practice a sentiment analysis approach ","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/amazon-fine-food-reviews/Reviews.csv')\nsampeled_data = data[:1000]\nsampeled_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:32:05.721895Z","iopub.execute_input":"2024-11-27T20:32:05.72249Z","iopub.status.idle":"2024-11-27T20:32:13.929995Z","shell.execute_reply.started":"2024-11-27T20:32:05.722453Z","shell.execute_reply":"2024-11-27T20:32:13.928755Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Initialize the tokenizer and the model. For this sentiment analysis I will be using the roBERTa transformer model to perform the analysis.  ","metadata":{}},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained(\"cardiffnlp/twitter-roberta-base-sentiment\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"cardiffnlp/twitter-roberta-base-sentiment\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:32:17.257931Z","iopub.execute_input":"2024-11-27T20:32:17.258325Z","iopub.status.idle":"2024-11-27T20:32:22.031215Z","shell.execute_reply.started":"2024-11-27T20:32:17.258289Z","shell.execute_reply":"2024-11-27T20:32:22.030002Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Define a function that takes in a reviews-list and a index for retreving a single review. The function should:\n\n    - Retrieve the review that is stored at the index.\n    - Tokenize the review with the previously defined tokenizer that is associated with the model. \n    - Feed the tokenized review to the model.\n    - Apply the softmax function to the result, which will then return our polarity scores.\n    - Assign the polarity scores to integers. \n    - Use the polarity scores integers to calculate a rough score between 1-5 (I arrived at this way of calculating score beeing the best, seeing            that this go the least amount of 'wrong' scores compared to the actual scores left by the user).\n    - Return a dictionary that contains the:\n        1. Negative score\n        2. Neutral score\n        3. Positive score\n        4. Calculated score","metadata":{}},{"cell_type":"code","source":"def calcPolarityScores(reviews, index):\n    sample_review = reviews[index]\n    input = tokenizer(sample_review, padding=True, truncation=True, max_length=128, return_tensors=\"pt\")\n    result = model(**input)\n    polarity_scores = softmax(result[0][0].detach().numpy())\n    neg, neu, pos = polarity_scores\n    review_score = round(neg*2 + neu*3 + pos*5)\n    result_dictionary = {\n        \"Negative\" : neg,\n        \"Neutral\" : neu,\n        \"Positive\" : pos,\n        \"Calculated score\" : review_score,\n    }\n    return result_dictionary\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:32:25.110028Z","iopub.execute_input":"2024-11-27T20:32:25.110822Z","iopub.status.idle":"2024-11-27T20:32:25.117079Z","shell.execute_reply.started":"2024-11-27T20:32:25.110783Z","shell.execute_reply":"2024-11-27T20:32:25.115896Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Apply the function to all 1000 reviews in the dataset and store the resulting dictionary for each review in a list called polarity_scores.","metadata":{}},{"cell_type":"code","source":"polarity_scores = []\nfor idx, review in sampeled_data.iterrows():\n    result = calcPolarityScores(sampeled_data['Text'], idx)\n    polarity_scores.append(result)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:32:29.076407Z","iopub.execute_input":"2024-11-27T20:32:29.076806Z","iopub.status.idle":"2024-11-27T20:35:14.620481Z","shell.execute_reply.started":"2024-11-27T20:32:29.076773Z","shell.execute_reply":"2024-11-27T20:35:14.619187Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Convert the contents of the polarity_scores list to a dataframe.","metadata":{}},{"cell_type":"code","source":"polarity_scores_df = pd.Dataframe(polarity_scores)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Perform a right-join with our polarity_scores dataframe and our original dataframe that contained the first 1000 reviews.","metadata":{}},{"cell_type":"code","source":"sampeled_data = sampeled_data.join(polarity_scores_df, how = 'right')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:36:47.128086Z","iopub.execute_input":"2024-11-27T20:36:47.128496Z","iopub.status.idle":"2024-11-27T20:36:47.143812Z","shell.execute_reply.started":"2024-11-27T20:36:47.12846Z","shell.execute_reply":"2024-11-27T20:36:47.142376Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Rename the column for the Calculated score to \"Calculated_score\".","metadata":{}},{"cell_type":"code","source":"sampeled_data.rename(columns={\"Calculated score\":\"Calculated_score\"}, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:37:01.013544Z","iopub.execute_input":"2024-11-27T20:37:01.014739Z","iopub.status.idle":"2024-11-27T20:37:01.020286Z","shell.execute_reply.started":"2024-11-27T20:37:01.014629Z","shell.execute_reply":"2024-11-27T20:37:01.019063Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"diff_reviews = sampeled_data.query('Score != Calculated_score')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T20:37:05.084161Z","iopub.execute_input":"2024-11-27T20:37:05.084582Z","iopub.status.idle":"2024-11-27T20:37:05.110833Z","shell.execute_reply.started":"2024-11-27T20:37:05.084546Z","shell.execute_reply":"2024-11-27T20:37:05.109749Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 4, figsize=(15, 5), sharey=True)  # 1 row, as many columns as needed\nfig.suptitle(\"Sentiment Score Histograms from roBERTa\", fontsize = 16)\naxes[0].hist(sampeled_data['Negative'], bins = 20, color = '#98FF98', alpha = 0.7, edgecolor = 'black')\naxes[0].set_title(\"Distribution of negative scores\")\naxes[0].set_xlabel(\"Score\")\naxes[0].set_ylabel(\"Frequency\")\n\naxes[1].hist(sampeled_data['Neutral'], bins = 20, color = '#98FF98', alpha = 0.7, edgecolor = 'black')\naxes[1].set_title(\"Distribution of neutral scores\")\naxes[1].set_xlabel(\"Score\")\naxes[1].set_ylabel(\"Frequency\")\n\n\naxes[2].hist(sampeled_data['Positive'], bins = 20, color = '#98FF98', alpha = 0.7, edgecolor = 'black')\naxes[2].set_title(\"Distribution of positive scores\")\naxes[2].set_xlabel(\"Score\")\naxes[2].set_ylabel(\"Frequency\")\n\naxes[3].hist(sampeled_data['Calculated_score'], bins = 20, color = '#98FF98', alpha = 0.7, edgecolor = 'black')\naxes[3].set_title(\"Distribution of calculated scores\")\naxes[3].set_xlabel(\"Score\")\naxes[3].set_ylabel(\"Frequency\")\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-27T21:07:14.078982Z","iopub.execute_input":"2024-11-27T21:07:14.079387Z","iopub.status.idle":"2024-11-27T21:07:14.75749Z","shell.execute_reply.started":"2024-11-27T21:07:14.079353Z","shell.execute_reply":"2024-11-27T21:07:14.7564Z"}},"outputs":[],"execution_count":null}]}